<?php
/**
 * Created by PhpStorm.
 * User: alexboyce
 * Date: 4/3/14
 * Time: 11:17 AM
 */

function registrationimportexport_menu() {
  $items = array();
  foreach (registration_get_registration_instances() as $instance) {
    $type = $instance['entity_type'];
    if (!in_array($type, array('registration', 'registration_type'))) {
      $items[$type . '/%entity_object/registrations/import'] = array(
        'load arguments' => array($type),
        'title' => 'Import',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('registration_entity_import_form', 0, 1),
        'access callback' => 'registration_administer_registrations_access',
        'access arguments' => array(0, 1),
        'weight' => 0,
        'type' => MENU_LOCAL_ACTION
      );

      $items[$type . '/%entity_object/registrations/export'] = array(
        'load arguments' => array($type),
        'title' => 'Export',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('registration_entity_export_form', 0, 1),
        'access callback' => 'registration_administer_registrations_access',
        'access arguments' => array(0, 1),
        'weight' => 1,
        'type' => MENU_LOCAL_ACTION
      );
    }
  }
  return $items;
}

function registration_entity_import_form($form, &$form_state, $entity_type, $entity) {
  $form_state['entity_type'] = $entity_type;
  $form_state[$entity_type] = $entity;
  if (isset($form_state['upload_file']) && !!($file = $form_state['upload_file'])) {
    _registration_process_import($form, $form_state, $entity_type, $entity);
  }
  else {
    $form['upload_file'] = array(
      '#type' => 'file',
      '#title' => t('Upload Registrants'),
      '#description' => t('Supported file formats: .txt, .csv, .json, .js')
    );

    $form['file_delimiter'] = array(
      '#type' => 'select',
      '#title' => t('Field Delimiter'),
      '#options' => array(
        'COMMA' => t('Comma (,)'),
        'TAB' => t('Tab Character'),
        'PIPE' => t('Pipe (|)')
      ),
      '#description' => t('When uploading a csv file, the delimiter is used to determine the separation of columns in rows')
    );

    $form['file_headers'] = array(
      '#type' => 'checkbox',
      '#title' => t('The file contains header names'),
      '#default_value' => 1
    );
    $uri = entity_uri($entity_type, $entity);
    $form['upload'] = array(
      '#type' => 'submit',
      '#value' => t('Upload'),
      '#suffix' => l('Cancel', $uri['path'].'/registrations/settings')
    );
  }

  return $form;
}

function registration_entity_import_form_validate(&$form, &$form_state) {
  if (!isset($form_state['upload_file'])) {
    $file = file_save_upload('upload_file', array('file_validate_extensions' => array('txt csv json js')));
    if (!!$file) {
      $form_state['upload_file'] = $file;
    }
  }
}

function registration_entity_import_form_submit(&$form, &$form_state) {
  $op = $form_state['values']['op'];
  $entity_type = $form_state['entity_type'];
  $entity = $form_state[$entity_type];

  if ($op == 'Upload') {
    $file = $form_state['upload_file'];
    if (!!$file) {
      $form_state['upload_file'] = $file;
      $form_state['file_delimiter'] = $form_state['values']['file_delimiter'];
      $form_state['file_headers'] = $form_state['values']['file_headers'];
      if (preg_match('/js(on)?/', $file->filemime) != FALSE) {
        _registration_process_import_submit($form, $form_state, $entity_type, $entity);
        $uri = entity_uri($entity_type, $entity);
        $form_state['redirect'] = $uri['path'].'/registrations';
      }
      else {
        $form_state['rebuild'] = TRUE;
      }
    }
    else {
      form_set_error('upload_file', t("Unable to save file or file type unsupported"));
    }
  }
  else {
    $uri = entity_uri($entity_type, $entity);
    $form_state['redirect'] = $uri['path'].'/registrations';
    _registration_process_import_submit($form, $form_state, $entity_type, $entity);
  }
}

function _registration_process_import(&$form, &$form_state, $entity_type, $entity) {
  $form_state['registration_type'] = registration_get_entity_registration_type($entity_type, $entity);
  $instances = field_info_instances('registration', $form_state['registration_type']);
  $file = $form_state['upload_file'];

  $selector = array(
    '#type' => 'select',
    '#title' => t('Instance Field Part'),
    '#title_visibility' => 'hidden',
    '#options' => array(
      'Registration' => array(
        'count' => t('Count (Self + Guests)'),
        'anon_mail' => t('Email'),
        'user_uid' => t('User ID'),
        'state' => t('Registration State')
      )
    ),
    '#empty_option' => '-- Skip Field --',
    '#empty_value' => FALSE
  );

  foreach ($instances as $instance) {
    $field = field_read_field($instance['field_name']);
    $columns = array();
    foreach (array_keys($field['columns']) as $column_name) {
      $columns[$instance['field_name'].':'.$column_name] = $column_name;
    }
    $selector['#options'][$instance['label']] = $columns;
  }

  $delimiters = array(
    'COMMA' => ',',
    'TAB' => "\t",
    'PIPE' => '|'
  );

  $filepath = drupal_realpath($file->uri);
  $fh = @fopen($filepath, 'r');
  $delimiter = $delimiters[$form_state['file_delimiter']];
  $csv = @fgetcsv($fh, 1000, $delimiter);

  if (!!$csv) {
    $form['import'] = array(
      '#type' => 'registration_import_table',
      '#empty' => t('No data was found in the file'),
      '#header' => array(t('Column Name'), t('Mapped to Field Value'))
    );

    $headers = array();
    if ($form_state['file_headers'] == 1) {
      $headers = $csv;
    }
    else {
      for ($i = 0; $i < count($csv[0]); $i++) {
        $headers[] = t('Row !i', array('!i' => $i));
      }
    }

    $headers = array_filter($headers);
    foreach ($headers as $i => $header) {
      $form['import'][$i] = array(
        '#title' => $header
      ) + $selector;
    }
    $uri = entity_uri($entity_type, $entity);
    $form['op_import'] = array(
      '#type' => 'submit',
      '#value' => t('Import'),
      '#suffix' => l('Cancel', $uri['path'].'/registrations')
    );
  }
  else {
    form_set_error('upload_file', t('There was an error parsing the file. Please try again.'));
    drupal_goto(); // Refresh the page.
  }
}

function _registration_process_import_submit($form, &$form_state, $entity_type, $entity) {
  // Load up the file info again
  $file = $form_state['upload_file'];

  if (preg_match('/csv/', $file->filemime) != FALSE) {
    $delimiters = array(
      'COMMA' => ',',
      'TAB' => "\t",
      'PIPE' => '|'
    );
    $delimiter = $delimiters[$form_state['file_delimiter']];
    _registration_import_csv($file, $entity_type, $entity, $form_state['values']['import'],
      $delimiter, $form_state['file_headers']);
  }
  elseif (preg_match('/js(on)?/', $file->filemime) != FALSE) {
    _registration_import_json($file, $entity_type, $entity);
  }
  else {
    drupal_set_message(t('Unsupported file type'), 'error');
    drupal_goto();
  }
}

function _registration_import_csv($file, $entity_type, $entity, $header_map, $delimiter = ',', $headers = FALSE) {
  global $user;
  $defaults = array(
    'type' => registration_get_entity_registration_type($entity_type, $entity),
    'entity_id' => entity_id($entity_type, $entity),
    'entity_type' => $entity_type,
    'state' => registration_get_default_state(),
    'author_uid' => $user->uid,
    'count' => 1
  );

  ini_set("auto_detect_line_endings", TRUE);
  $filepath = drupal_realpath($file->uri);
  $fh = @fopen($filepath, 'r');
  if ($headers = TRUE) {
    $row = @fgetcsv($fh, 1000, $delimiter);
  }

  // After mapping the csv file columns to registration values, import the values using the mappings
  $states = registration_get_active_states();
  $i = 0;
  while($row = @fgetcsv($fh, 1000, $delimiter)) {
    $values = $defaults;

    foreach ($row as $j => $value) {
      $key = $header_map[$j];
      if ($key == FALSE) {
        continue;
      }

      if ($key == 'anon_mail' && !!($reg_user = user_load_by_mail($value))) {
        $values['user_uid'] = $reg_user->uid;
        continue;
      }

      if (($key == 'user_uid' && isset($values['user_uid'])) || ($key == 'user_uid' && !isset($value))) {
        continue;
      }

      if ($key == 'state') {
        $value = preg_replace('/[\s-]+/', '_', strtolower($value));
        if (in_array($value, $states)) {
          $values[$key] = $value;
        }
        continue;
      }

      if (preg_match('/^field_/', $key) == FALSE) {
        $values[$key] = $value;
        continue;
      }

      list($key, $col_key) = explode(':', $key);
      $instance = field_read_instance('registration', $key, $values['type']);
      $field = field_read_field($instance['field_name']);
      $cardinality = $field['cardinality'];

      $matches = array();
      if (preg_match('/_(?<colkey>\d+)$/', $col_key, $matches) == 1) {
        $col_key = $matches['colkey'];
      }

      if (!isset($values[$key])) {
        $values[$key] = array('und' => array(0 => NULL));
      }

      $delta = count($values[$key]) - 1;
      if (isset($values[$key][$delta][$col_key])) {
        $delta++;
        $values[$key][$delta][$col_key] = NULL;
      }
      $field_lang = field_language($entity_type, $entity, $instance['field_name']);
      if (!$field_lang) {
        $field_lang = 'und';
      }
      if ($cardinality == FIELD_CARDINALITY_UNLIMITED || $delta <= $cardinality) {
        $values[$key][$field_lang][$delta][$col_key] = $value;
      }
    }

    $registration = entity_create('registration', $values);
    $success = registration_save($registration);
    if (!$success) {
      drupal_set_message(t('Error importing !nth registration in file.', array('!nth' => $i)), 'error');
    }
    $i++;
  }
  fclose($fh);
  drupal_set_message(t('Registration import complete'));
}

function _registration_import_json($file, $entity_type, $entity) {
  global $user;
  ini_set("auto_detect_line_endings", true);
  $filepath = drupal_realpath($file->uri);
  $fh = @fopen($filepath, 'r');
  $contents = file_get_contents($filepath);
  if ($contents !== FALSE) {
    $data = json_decode($contents);
    fclose($fh);

    $defaults = array(
      'type' => registration_get_entity_registration_type($entity_type, $entity),
      'entity_id' => entity_id($entity_type, $entity),
      'entity_type' => $entity_type,
      'state' => registration_get_default_state(),
      'author_uid' => $user->uid
    );

    foreach ($data as $i => $item) {
      $item += $defaults;
      $registration = entity_create('registration', $item);
      if (!registration_save($registration)) {
        drupal_set_message(t('Error importing !nth registration in file.', array('!nth' => $i)), 'error');
      }
    }
    drupal_set_message(t('Registration import complete'));
  }
  else {
    drupal_set_message(t('Unable to import the file'), 'error');
  }
}

function registration_entity_export_form($form, &$form_state, $entity_type, $entity) {
  $form_state['entity_type'] = $entity_type;
  $form_state[$entity_type] = $entity;

  drupal_set_message(t('When migrating registrations to another website, JSON format is recommended.'), 'warning');
  $form['format'] = array(
    '#type' => 'select',
    '#options' => array(
      'csv' => 'Comma Separated Values (csv)',
      'json' => 'JavaScript Object Notation (json)'
    )
  );

  $form['export'] = array(
    '#type' => 'submit',
    '#value' => t('Export')
  );

  return $form;
}

function registration_entity_export_form_submit($form, &$form_state) {
  $entity_type = $form_state['entity_type'];
  $entity = $form_state[$entity_type];
  $format = $form_state['values']['format'];
  registration_export(FALSE, $format, $entity_type, $entity);
}

function registration_export($ids = FALSE, $format = 'csv', $entity_type = NULL, $entity = NULL) {
  if (!!$ids) {
    $registrations = registration_load_multiple($ids);
  }
  elseif (!!$entity_type && !!$entity) {
    $registration_type = registration_get_entity_registration_type($entity_type, $entity);
    $registrations = registration_load_multiple(FALSE, array('type' => $registration_type));
  }
  else {
    $registrations = registration_load_multiple();
  }

  if ($format == 'csv') {
    _registration_export_csv($registrations, $entity_type, $entity);
  }
  elseif ($format == 'json') {
    _registration_export_json($registrations);
  }
  drupal_not_found();
}

function _registration_export_json($registrations) {
  $export = array();
  foreach ($registrations as $registration) {
    $vars = get_object_vars($registration);
    unset($vars['is_new']);
    $export[] = $vars;
  }
  $output = entity_var_json_export($export);
  $filename = 'registration-export-'.(new DateTime())->format(DateTime::ISO8601).'.json';
  ob_start();
  header('Content-Type: application/json');
  header('Content-Disposition: inline; filename="'.$filename.'"');
  print $output;
  $data = ob_get_contents();
  ob_end_clean();
  $file = file_save_data($data, 'temporary://'.$filename);
  file_download(file_uri_scheme($file->uri), file_uri_target($file->uri));
}

function _registration_export_csv($registrations, $entity_type, $entity) {
  $header_registration = reset($registrations);
  $headers = array();
  $rows = array();
  if (!$header_registration) {
    $header_registration = entity_create('registration', array());
  }
  $reg_fields = get_object_vars($header_registration);

  unset(
  $reg_fields['is_new'],
  $reg_fields['registration_id'],
  $reg_fields['type'],
  $reg_fields['entity_id'],
  $reg_fields['entity_type'],
  $reg_fields['author_uid'],
  $reg_fields['rdf_mapping'],
  $reg_fields['created'],
  $reg_fields['updated']
  );

  // Prepare the headers
  foreach ($reg_fields as $name => $value) {
    // fields are nested in [lang][item] format
    if (preg_match('/^field_/', $name) == 1) {
      $value = reset($value);
      if (count($value) > 1) {
        foreach ($value as $i => $item) {
          foreach ($item as $n => $val) {
            $headers[] = $name.'_'.$i.':'.$n;
          }
        }
        continue;
      }
      if (count($value[0]) > 1) {
        foreach ($value[0] as $n => $item) {
          $headers[] = $name.':'.$n;
        }
        continue;
      }
    }

    $headers[] = $name;
  }

  $rows[] = $headers;

  // Iterate over the registrations, if there are any. We will output a header template if not
  if (!!$registrations) {
    foreach ($registrations as $id => $registration) {
      $vars = get_object_vars($registration);
      unset(
      $vars['is_new'],
      $vars['registration_id'],
      $vars['type'],
      $vars['entity_id'],
      $vars['entity_type'],
      $vars['author_uid'],
      $vars['rdf_mapping'],
      $vars['created'],
      $vars['updated']
      );
      $row = &$rows[$id];

      foreach ($vars as $name => $value) {
        if (preg_match('/^field_/', $name) == 1) {
          $value = reset($value);
          if (count($value) > 1) {
            foreach ($value as $item) {
              $row[] = $item;
            }
          }
          else {
            foreach ($value[0] as $item) {
              $row[] = $item;
            }
          }
          continue;
        }

        $row[] = $value;
      }
    }
  }

  $filename = 'registration-export-'.(new DateTime())->format(DateTime::ISO8601).'.csv';
  ob_start();
  header('Content-Type: text/csv');
  header('Content-Disposition: inline; filename="'.$filename.'"');
  $data = ob_get_contents();
  ob_end_clean();
  $file = file_save_data($data, 'temporary://'.$filename);
  $filepath = drupal_realpath($file->uri);
  $fh = @fopen($filepath, 'w');
  foreach ($rows as $r) {
    fputcsv($fh, $r);
  }
  fclose($fh);
  file_download(file_uri_scheme($file->uri), file_uri_target($file->uri));
}

function registrationimportexport_file_download($uri) {
  $target = file_uri_target($uri);

  if (preg_match('/^registration-export-/', $target) == 1) {
    $file = file_load_multiple(array(), array('uri' => $uri));
    if (!!$file) {
      $file = array_shift($file);
      return file_get_content_headers($file);
    }
  }
  return NULL;
}

function registrationimportexport_element_info() {
  return array(
    'registration_import_table' => array(
      '#input' => TRUE,
      '#theme' => 'registration_import_table',
      '#theme_wrappers' => array('form_element'),
      '#header' => array(),
      '#empty' => NULL,
      '#tree' => TRUE,
      '#process' => array('ajax_process_form')
    )
  );
}

function registrationimportexport_theme($existing, $type, $theme, $path) {
  return array(
    'registration_import_table' => array(
      'render element' => 'element'
    )
  );
}

function theme_registration_import_table($variables) {
  $element = $variables['element'];
  $children = element_children($element, TRUE);
  $rows = array();

  foreach ($children as $name) {
    $child = &$element[$name];
    $child['#title_display'] = 'hidden';
    $child['#theme_wrappers'] = array();
    $rows[] = array(
      t('@title', array('@title' => $child['#title'])),
      drupal_render($child)
    );
  }

  return theme('table', array('header' => $element['#header'], 'rows' => $rows, 'empty' => $element['#empty']));
}